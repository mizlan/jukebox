#!/usr/bin/env bash

shopt -s nullglob

[ -z "$JB_ROOT_DIR" ] && JB_ROOT_DIR="$HOME/jb"
[ -z "$JB_SONG_DIR" ] && JB_SONG_DIR="$JB_ROOT_DIR/songs"
[ -z "$JB_INFO_DIR" ] && JB_INFO_DIR="$JB_ROOT_DIR/cache"
[ -z "$JB_PLAYER" ] && JB_PLAYER="afplay"
[ -z "$JB_FILTER" ] && JB_FILTER="fzf"
[ -z "$JB_MULTI_FILTER" ] && JB_MULTI_FILTER="fzf -m"


# repeats action for each line of input
repeat_action() {
  action="$1"
  while read -r line; do
    echo "$line" | $action
  done < /dev/stdin
}

# song ID -> adds song
add_song() {
  read -r song_id
  dest="${JB_SONG_DIR}/%(id)s.%(ext)s"
  youtube-dl --no-playlist -f 'bestaudio[ext=m4a]' --write-info-json -o "$dest" "$song_id"
}

# song ID -> deletes song
del_song() {
  read -r song_id
  [ -n "$id" ] || exit 1;
  rm -v "$JB_SONG_DIR"/"$song_id"*
}

# song ID -> plays song
play_song() {
  read -r song_id
  $JB_PLAYER "$JB_SONG_DIR"/"$song_id".m4a
}

# song ID -> description/metadata
describe_song() {
  read -r song_id
  cached_info="$JB_INFO_DIR"/"$song_id"
  [ -e "$cached_info" ] || {
    # NOTE: cache the info
    info_file="$JB_SONG_DIR"/"$song_id".info.json
    [ -d "$JB_INFO_DIR" ] || mkdir -p "$JB_INFO_DIR"
    title=$(jq -r '.title' < "$info_file")
    uploader=$(jq -r '.uploader' < "$info_file")
    printf "%s uploaded by %s [id:%s]\n" "$title" "$uploader" "$song_id" > "$cached_info"
  }
  cat "$cached_info"
}

# description/metadata -> song ID
get_song_id() {
  read -r song_id
  echo "$song_id" \
    | grep -E '\[id:[A-Za-z0-9_-]+\]' \
    | sed 's/.*\[id://; s/\]$//'
}

# get a list of song IDs
all_song_ids() {
  for song in "$JB_SONG_DIR"/*.m4a; do
    printf "%s\n" "$(basename "$song" .m4a)"
  done
}

# get user selection, returns song ID(s)
# option of single or multiple selection
select_song() {
  case "$1" in
    single) filter=$JB_FILTER ;;
    multi) filter=$JB_MULTI_FILTER ;;
    *) exit 1 ;;
  esac
  all_song_ids \
    | repeat_action describe_song \
    | $filter \
    | repeat_action get_song_id
}

description() {
  cat << EOF
jb: a command-line music manager

a   - add song(s) by piping link(s) through stdlin
d   - delete song(s) by piping song id(s) through stdin
p   - play song(s) by piping song id(s) through stdin
D   - describe all song ids from stdin
l   - describe all downloaded songs
s1  - select a single song
s   - select multiple songs
      (the only difference between <s> and <s1> is which
      filter they use, to provide a convenience)
ids - print all song ids
EOF
}

case "$1" in
  a) repeat_action add_song ;;
  d) repeat_action del_song ;;
  p) repeat_action play_song ;;
  D) repeat_action describe_song ;;
  l) all_song_ids | repeat_action describe_song ;;
  s1) select_song single ;;
  s) select_song multi ;;
  ids) all_song_ids ;;
  *) description ;;
esac
